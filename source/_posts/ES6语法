## ES6语法
说明：ES6强制开启严格模式。严格模式变量未声明不能引用报引用错误。
###### 变量声明方式<br/>
- 块作用域：任何一对花括号（｛｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br/>
- let let声明的变量是在块作用域有效。<br/>
说明：let不能重复声明变量<br/>
- const const声明的常量是不能修改的，也是在块作用域有效。<br/>
注：const声明的时候必须赋值。console声明对象，是引用属性的，指针不会改变。<br/>

######  解构赋值<br/>
ES6变量的解构赋值本质上是“模式匹配”,只要等号两边的模式相同，左边的变量就会被赋予匹配的右边的值，如果匹配不成功变量的值就等于undefined<br/>
如下面的例子：<br/>

`{
  let a,b,rest;
  [a,b]=[1,2];
  console.log(a,b);
} // 1,2`

`{
  let a,b,rest;
  [a,b,...rest]=[1,2,3,4,5,6];
  console.log(a,b,rest);
} //1, 2, [3, 4, 5, 6]`
`{
  let a,b;
  ({a,b}={a:1,b:2})
  console.log(a,b);
}  // 1,2`

`{
  let a,b,c,rest;
  [a,b,c=3]=[1,2];
  console.log(a,b,c);
}  //1,2,3`

`{
  let a=1;
  let b=2;
  [a,b]=[b,a];
  console.log(a,b);
} // 2,1`

`{
  function f(){
    return [1,2]
  }
  let a,b;
  [a,b]=f();
  console.log(a,b);
} // 1,2`
`{
  function f(){
    return [1,2,3,4,5]
  }
  let a,b,c;
  [a,,,b]=f();
  console.log(a,b);
} // 1,4`
`{
  function f(){
    return [1,2,3,4,5]
  }
  let a,b,c;
  [a,,...b]=f();
  console.log(a,b);
} // 1,[3,4,5]`
`{
  let o={p:42,q:true};
  let {p,q}=o;
  console.log(p,q);
 } // 42,true`
`{
  let {a=10,b=5}={a:3};
  console.log(a,b);
} //3 ,5`
`{
  let metaData={
    title:'abc',
    test:[{
      title:'test',
      desc:'description'
    }]
  }
  let {title:esTitle,test:[{title:cnTitle}]}=metaData;
  console.log(esTitle,cnTitle);
} // abc,test`
###### 正则扩展
